#include "pdfsm.h"

#include <catch2/catch_test_macros.hpp>

#include "states.h"

TEST_CASE("pdfsm/1", "[Push and pop]") {
  auto bb = std::make_shared<Blackboard>();
  auto ctx = pdfsm::Context(bb);
  pdfsm::StateMachineHandler<S> h(behaviorTable, transitionTable);
  h.SetHandlingFsm(fsm, ctx);
  // initial jumps to A
  REQUIRE(bb->onEnterCounterA == 1);
  // push to B
  h.Push(ctx, S::B);
  REQUIRE(bb->onPauseCounterA == 1);
  REQUIRE(bb->onEnterCounterB == 1);
  // pops
  h.Pop(ctx);
  REQUIRE(bb->onResumeCounterA == 1);
  REQUIRE(bb->onTerminateCounterB == 1);
  h.ClearHandlingFsm();
}
TEST_CASE("pdfsm/3", "[Jump Check]") {
  auto bb = std::make_shared<Blackboard>();
  auto ctx = pdfsm::Context(bb);
  pdfsm::StateMachineHandler<S> h(behaviorTable, transitionTable);
  h.SetHandlingFsm(fsm, ctx);
  // inits to A
  REQUIRE(bb->onEnterCounterA == 1);
  // jump to B
  h.Push(ctx, S::B);
  // can't jump back to A.
  REQUIRE_THROWS(h.Jump(ctx, S::A));
}
